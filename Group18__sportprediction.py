# -*- coding: utf-8 -*-
"""Group18._SportPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qKugGL6CcofYMlXjfz8JsUdKarZ6VY4y
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
csv_file_path = '/content/drive/MyDrive/Colab Notebooks/players_21.csv'
df = pd.read_csv(csv_file_path)
pd.set_option('display.max_columns', None)
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt
from xgboost import XGBRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
import sklearn

df.head()

"""Data Processing"""

cf = df.select_dtypes(include=['object'])
numf = df.select_dtypes(exclude=['object'])

cf.info()

cf[cf.columns] = cf.bfill()
cf[cf.columns] = cf.ffill()

label_encoder=LabelEncoder()
cf= cf.apply(label_encoder.fit_transform)

cf

from sklearn.impute import SimpleImputer
imp=SimpleImputer()
imputed_data=imp.fit_transform(numf)
numf=pd.DataFrame(imputed_data, columns=numf.columns)

df=pd.concat([numf,cf],axis=1)

corr_matrix=df.corr()
corr=corr_matrix["overall"].sort_values(ascending=False)
pd.set_option('display.max_columns',None)
pd.set_option('display.max_rows', 110)
corr

columns=['overall', 'movement_reactions', 'mentality_composure',
         'passing', 'rcm', 'cm', 'lcm', 'potential', 'rm',
         'lm', 'lam', 'cam', 'ram', 'release_clause_eur',
       'cf', 'lf', 'rf']

fifadf=df[columns]

y=fifadf['overall']
fifadf.drop('overall',axis=1,inplace=True)
X=fifadf

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()

scaled_data=sc.fit_transform(fifadf)

fifadf=pd.DataFrame(scaled_data,columns=fifadf.columns)

X=fifadf

"""Model training and Cross Validation

"""

Xtrain,Xtest,Ytrain,Ytest=train_test_split(X,y,test_size=0.2,random_state=42)

from sklearn.model_selection import KFold, GridSearchCV
from sklearn.metrics import mean_absolute_error

cv = KFold(n_splits=2)
PARAMETERS = {
 'n_estimators': [100, 300, 500],
  'max_depth': [None, 10, 20, 30],
  'n_jobs':[-1]
  }
rf=RandomForestRegressor()
gs = GridSearchCV(rf,param_grid=PARAMETERS,cv=cv,scoring="neg_mean_absolute_error")
gs.fit(Xtrain,Ytrain)
y_pred=gs.predict(Xtest)
print(mean_absolute_error(y_pred,Ytest))

xgbr = XGBRegressor()
param_grid = {
    'n_estimators': [100, 500, 1000],
    'max_depth': [3, 4, 5],
    'subsample': [0.8, 0.9, 1.0],
    }
kf = KFold(n_splits=5, shuffle=True, random_state=42)
xgbr= GridSearchCV(estimator=xgbr, param_grid=param_grid,
                           scoring="neg_mean_absolute_error", cv=kf, n_jobs=-1)
xgbr.fit(Xtrain,Ytrain)

y_pred=xgbr.predict(Xtest)

print(mean_absolute_error(y_pred,Ytest))

gbr = GradientBoostingRegressor()

param_grid = {
    'n_estimators': [100, 200, 300],
    'learning_rate': [0.01, 0.1, 0.3],
    'max_depth': [3, 4, 5],
    'subsample': [0.8, 0.9, 1.0],
}
kf = KFold(n_splits=5, shuffle=True, random_state=42)

gbr= GridSearchCV(estimator=gbr, param_grid=param_grid,
                           scoring='neg_mean_absolute_error', cv=kf, n_jobs=-1)

gbr.fit(X, y)
y_pred3=gbr.predict(Xtest)
mean_absolute_error(y_pred3,Ytest)

csv_file_path = '/content/drive/MyDrive/Colab Notebooks/players_22.csv'
df22 = pd.read_csv(csv_file_path)

"""Testing with New Data set"""

cf22 = df22.select_dtypes(include=['object'])
numf22 = df22.select_dtypes(exclude=['object'])

cf22[cf.columns] = cf22.bfill()
cf22[cf.columns] = cf22.ffill()

label_encoder=LabelEncoder()
cf22= cf22.apply(label_encoder.fit_transform)

from sklearn.impute import SimpleImputer
imp=SimpleImputer()
imputed_data=imp.fit_transform(numf22)
numf22=pd.DataFrame(imputed_data, columns=numf22.columns)

df22=pd.concat([cf22,numf22],axis=1)

sc=StandardScaler()

scaled_data=sc.fit_transform(df22)

df22=pd.DataFrame(scaled_data,columns=df22.columns)



columns=['overall', 'movement_reactions', 'mentality_composure',
         'passing', 'rcm', 'cm', 'lcm', 'potential', 'rm',
         'lm', 'lam', 'cam', 'ram', 'release_clause_eur',
       'cf', 'lf', 'rf']

df22=df22[columns]
y=df22['overall']
df22.drop('overall',axis=1,inplace=True)

#RandomForest
ypred=gs.predict(df22)
mean_absolute_error(ypred,y)

ypred=xgbr.predict(df22)
mean_absolute_error(ypred,y)

ypred=gbr.predict(df22)
mean_absolute_error(ypred,y)

import pickle
filename = '/content/drive/My Drive/Colab Notebooks/midsemmodel.pkl'
pickle.dump(gbr, open(filename, 'wb'))

